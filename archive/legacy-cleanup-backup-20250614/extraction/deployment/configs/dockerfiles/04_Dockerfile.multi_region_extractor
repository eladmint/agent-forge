FROM python:3.11-slim

# Set working directory
WORKDIR /app

# Install system dependencies for browser automation and networking tools
RUN apt-get update && apt-get install -y \
    wget \
    curl \
    gnupg \
    ca-certificates \
    procps \
    libglib2.0-0 \
    libnss3 \
    libnspr4 \
    libatk1.0-0 \
    libatk-bridge2.0-0 \
    libcups2 \
    libdrm2 \
    libdbus-1-3 \
    libatspi2.0-0 \
    libx11-6 \
    libxcomposite1 \
    libxdamage1 \
    libxext6 \
    libxfixes3 \
    libxrandr2 \
    libgbm1 \
    libxss1 \
    libasound2 \
    && rm -rf /var/lib/apt/lists/*

# Install Node.js for Steel Browser MCP integration
RUN curl -fsSL https://deb.nodesource.com/setup_18.x | bash - \
    && apt-get install -y nodejs

# Copy requirements files
COPY requirements.txt requirements_browser_automation.txt ./
COPY config/requirements_browser_automation.txt ./config/

# Install Python dependencies
RUN pip install --no-cache-dir -r requirements.txt
RUN pip install --no-cache-dir -r requirements_browser_automation.txt

# Install additional dependencies for distributed extraction
RUN pip install --no-cache-dir \
    aiohttp==3.9.1 \
    aiofiles==23.2.1 \
    asyncio-throttle==1.0.2 \
    httpx[http2]==0.25.2 \
    tenacity==8.2.3

# Install Playwright and browsers
RUN playwright install chromium
RUN playwright install-deps chromium

# Copy MCP tools and build Steel Browser server
COPY mcp_tools/ ./mcp_tools/
WORKDIR /app/mcp_tools
RUN npm install
RUN npm run build
WORKDIR /app

# Copy application code
COPY . .

# Create directories for logs and temp files
RUN mkdir -p /app/logs /app/temp /app/results

# Set environment variables
ENV PYTHONPATH=/app
ENV PORT=8080
ENV LOG_LEVEL=INFO
ENV EXTRACTION_MODE=distributed
ENV MAX_CONCURRENT=4
ENV STEEL_BROWSER_ENABLED=true
ENV PLAYWRIGHT_BROWSERS_PATH=/app/.playwright

# Expose port
EXPOSE 8080

# Health check with region awareness
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD curl -f http://localhost:8080/health?region=${REGION} || exit 1

# Copy the multi-region extraction service
COPY services/multi_region_extraction_service.py ./services/

# Run the multi-region extraction service
CMD ["python", "-m", "services.multi_region_extraction_service"]